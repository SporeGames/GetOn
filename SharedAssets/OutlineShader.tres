[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;
uniform float blink_strength : hint_range(0, 1) = 0.5;
uniform float blink_rate : hint_range(0, 20) = 3.0;
uniform vec4 outline_color : hint_color = vec4(.0, .8, .2, 1.0);
uniform float outline_size : hint_range(0, 1) = 0.02;

void fragment() {
	vec2 px = vec2(TEXTURE_PIXEL_SIZE.x, 0) + vec2(outline_size, 0); // This is a bit of an ugly hack but whatever
	vec2 py = vec2(0, TEXTURE_PIXEL_SIZE.y) + vec2(0, outline_size);
	vec4 r = texture(TEXTURE, UV + px);
	vec4 l = texture(TEXTURE, UV - px);
	vec4 u = texture(TEXTURE, UV - py);
	vec4 d = texture(TEXTURE, UV + py);
	vec4 pixel = texture(TEXTURE, UV);
	
	float new_alpha = clamp(r.a + l.a + u.a + d.a, 0, 1); // 1 if should be on, 0 if should be off
	float dim_alpha = new_alpha*clamp(abs(sin(TIME*blink_rate)),blink_strength,1.0); // dim the alpha by time
	COLOR.a = mix(dim_alpha, new_alpha, pixel.a); 
	COLOR.rgb = mix(outline_color.rgb, pixel.rgb, pixel.a);
}"
